package Dao;

import java.sql.*;
import java.util.ArrayList;

import Utilities.Conexao;
import Dao_OLD.ConnectionFactory;

public class CaronaDAO {
    private static PreparedStatement pstmt = null;
    
    private static ResultSet rs = null;
	private Connection connection;
    public ConnectionFactory conexta;
	
	public CaronaDAO() {
		this.connection = new ConnectionFactory().getConnection();	
	}
	
    public void adiciona(Carona rota) {
		String sql = "INSERT INTO caronas (idCarona, origem, chegada, parada1, parada2, parada3 " +
				" VALUES (?,?,?,?,?,?)";
		try {	
			// prepared statement para inserção		
			PreparedStatement stmt = connection.prepareStatement(sql);						
			// seta os valores
			stmt.setInt(1,rota.getIdCarona());
			stmt.setString(2, rota.getOrigem());
			stmt.setString(3, rota.getDestino());
			stmt.setString(4, rota.getParada1());
			stmt.setString(5, rota.getParada2());
			stmt.setString(6, rota.getParada3());
			
			// executa
			stmt.execute();
			stmt.close();
			connection.close();
			
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}		
	}
    
    public static boolean update(Carona rota) {
        try {
            pstmt = Conexao.getConnection().prepareStatement(
                    "Update caronas Set origem=?, destino=?, parada1=?, parada2=?, parada3=? " +
                    "where idCarona = ?");
            pstmt.setString(1, rota.getOrigem());            
            pstmt.setString(2, rota.getDestino());
            pstmt.setString(3, rota.getParada1());
            pstmt.setString(5, rota.getParada2());
            pstmt.setString(6, rota.getParada3());
            pstmt.executeUpdate();
            pstmt.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    public static boolean delete(Carona rota) {
        try {
            pstmt = Conexao.getConnection().prepareStatement(
                    "Delete From caronas Where idCarona = ?");
            pstmt.setInt(1, rota.getIdCarona());
            pstmt.executeUpdate();
            pstmt.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    public static ArrayList<Carona> getAll() {
        try {
            ArrayList<Carona> listAll = null;
            Carona rota = new Carona();
            pstmt = Conexao.getConnection().prepareStatement(
                    "Select * From caronas Order By origem");
            rs = pstmt.executeQuery();
            if (rs.next()) {
                listAll = new ArrayList<Carona>();
                do {
                    rota = new Carona();
                    rota.setIdCarona(rs.getInt("idRota"));
                    rota.setOrigem(rs.getString("origem"));
                    rota.setDestino(rs.getString("destino"));
                    rota.setParada1(rs.getString("parada1"));
                    rota.setParada2(rs.getString("parada2"));
                    rota.setParada3(rs.getString("parada3"));
                    listAll.add(rota);
                } while (rs.next());
            }
            rs.close();
            pstmt.close();
            return listAll;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public static Carona getById(int Id) {
        try {
            Carona rota = null;
            pstmt = Conexao.getConnection().prepareStatement(
                    "Select * From rotas Where idRota= ?");
            pstmt.setInt(1, Id);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                rota = new Carona();
                rota.setIdCarona(rs.getInt("idRota"));
                rota.setOrigem(rs.getString("origem"));
                rota.setDestino(rs.getString("destino"));
                rota.setParada1(rs.getString("parada1"));
                rota.setParada2(rs.getString("parada2"));
                rota.setParada3(rs.getString("parada3"));
            }
            rs.close();
            pstmt.close();
            return rota;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
            
	public int getLast() {
		try{
			int id = 0;
			PreparedStatement stmt = this.connection.prepareStatement("SELECT MAX( idRota ) as idRota FROM rotas");
			ResultSet rs = stmt.executeQuery();
			while (rs.next())
			id = rs.getInt("idRota");
			rs.close();
			stmt.close();
			return id;
		}catch (SQLException e){
		throw new RuntimeException(e);
		}
	}   
    
}